#리스트
#1부터 10까지의 숫자 중 홀수 모음인 1, 3, 5, 7, 9의 숫자 모음을 숫자나 문자열로 표현하기는 쉽지 않다.
#그래서 이러한 점을 해소할 수 있는 리스트를 공부할 것이다.
odd=[1, 3, 5, 7, 9]
#리스트는 '리스트명=[요소1, 요소2, 요소3, ...]'로 표현한다.

a=[]
b=[1, 2, 3]
c=['Life', 'is', 'too', 'short']
d=[1, 2, 'Life', 'is']
e=[1, 2, ['Life', 'is']]
#위처럼 아무것도 표현하지 않을 수도 있고 숫자만을 가진 요솟값으로 가질 수도 있고 문자열을 요솟값으로 가질 수도 있다. 또한 숫자와 문자열을 요솟값으로 가질 수도 있으며 리스트 자체를 요솟값으로 가질 수도 있다.

#리스트의 인덱싱과 슬라이싱
#리스트도 문자열처럼 인덱싱과 슬라이싱이 가능하다.
#1. 리스트의 인덱싱
a=[1, 2, 3]
a[0]
1
#문자열 자료형의 기억을 되살려보자. 파이썬은 0부터 세기 때문에 a[0]을 인덱싱 했을 때 1이 나오게 되는 것이다.

a[0]+a[2]
4

a[-1]
3

a=[1, 2, 3, ['a', 'b', 'c']]
a[0]
1
a[-1]
['a', 'b', 'c']
a[3]
['a', 'b', 'c']
#리스트 자체를 요솟값으로 가질 수 있기 때문에 a[3]을 인덱싱 했을 때 'a'가 아닌 ['a', 'b', 'c']의 결괏값을 보여 준다.

#그럼 ['a', 'b', 'c']리스트에서 'a'를 인덱싱 할 수 있을까?
a[-1][0]
'a'
a[-1][1]
'b'
a[-1][2]
'c'
#역시 어렵지 않다. ['a', 'b', 'c']에 인덱싱을 추가로 해주면 가능하다.

#1-1. 삼중 인덱싱
a=[1, 2, ['a', 'b', ['Life', 'is']]]
a[2][2][0]
'Life'
#아까 했던 ['a', 'b', 'c']리스트에서 'a'를 인덱싱하는 과정을 응용하여 'Life'를 끄집어낼 수 있다. 자주 사용하지는 않지만 알아두는 것이 좋다.

#2. 리스트의 슬라이싱
a=[1, 2, 3, 4, 5]
a[0:2]
[1, 2]
#역시 문자열 자료형을 기억해 보면 0은 a보다 크거나 같고, 2는 a보다 작기 때문에 a[0:2]로 했을 때 01만 출력되는 것을 잊지 말자.

#2-1. 중첩된 리스트 슬라이싱
a=[1, 2, 3, ['a', 'b', 'c'], 4, 5]
a[2:5]
[3, ['a', 'b', 'c'], 4]
a[3][:2]
['a', 'b']

#리스트 연산하기
#1. 리스트 더하기
a=[1, 2, 3]
b=[4, 5, 6]
a+b
[1, 2, 3, 4, 5, 6]

#1-1. 리스트 반복하기
a=[1, 2, 3]
a*3
[1, 2, 3, 1, 2, 3, 1, 2, 3]

#리스트의 수정과 삭제
#리스트는 값을 수정하거나 삭제할 수 있다.
#1. 리스트에서 값 수정하기
a=[1, 2, 3]
a[2]=4
a
[1, 2, 4]

#2. 리스트에서 값 삭제하기
a=[1, 2, 3]
del a[1]
a
[1, 3]

#2-1. 슬라이싱 기법을 활용한 리스트의 요소 여러 개 삭제하기
a=[1, 2, 3, 4, 5]
del a[2:]
a
[1, 2]

#3. 리스트에 요소 추가
a=[1, 2, 3]
a.append(4)
a
[1, 2, 3, 4]
a.append([5,6])
a
[1, 2, 3, 4, [5, 6]]

#4. 리스트 정렬
a=[1, 4, 3, 2]
a.sort()
a
[1, 2, 3, 4]
a=['a', 'c', 'b']
a.sort()
a
['a', 'b', 'c']

#5. 리스트 뒤집기
a=['a', 'c', 'b']
a.reverse()
a
['b', 'c', 'a']

#6. 위치 반환(인덱싱)
a=[1, 2, 3]
a.index(3)
2
a.index(1)
0
#a[1, 2, 3]
#  0  1  2

#7. 리스트에 요소 삽입
a=[1, 2, 3]
a.insert(0, 4)
a
[4, 1, 2, 3]
#insert(a, b)는 리스트의 a번째 위치에 b를 삽입하는 함수이다. 파이썬은 숫자를 0부터 세는 것을 잊지 말자.
a.insert(3, 5)
a
[4, 1, 2, 5, 3]

#8. 리스트 요소 제거
a=[1, 2, 3, 1, 2, 3]
a.remove(3)
a
[1, 2, 1, 2, 3]
#a가 3이라는 값을 2개 가지고 있을 경우 첫 번째 3만 제거된다.
a.remove(3)
a
[1, 2, 1, 2]
#remove(3)을 한 번 더 실행하면 다시 3이 삭제된다.

#9. 리스트 요소 끄집어내기
a=[1,2,3]
a.pop(1)
2
a
[1, 3]
#pop()은 리스트의 요소를 돌려주고 그 요소는 삭제한다.(01이기 때문에 1이 아닌 2가 삭제된 것을 알 수 있다.)

#10. 리스트에 포함된 요소 x의 개수 세기
a=[1,2,3,1]
a.count(1)
2

#11. 리스크 확장
a=[1,2,3]
a.extend([4,5])
a
[1, 2, 3, 4, 5]
b=[6, 7]
a.extend(b)
a
[1, 2, 3, 4, 5, 6, 7]
#extend(x)에서 x에는 리스트만 올 수 있으며 원래의 a리스트에 x리스트를 더하게 된다.